services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - grafana-vol:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
      - ./dashboards:/var/lib/grafana/dashboards
      - ./dalvany-image-panel:/var/lib/grafana/plugins/dalvany-image-panel

    environment:
      GF_SECURITY_ADMIN_MAIL: "insigno@mindshub.it"
      GF_SECURITY_ADMIN_USER: "Mindshub"
      GF_SECURITY_ADMIN_PASSWORD: "test"
      GF_SERVER_DOMAIN: insigno.mindshub.it
      datasource: prometheus_uid
      GF_SERVER_ROOT_URL: "${COMP_PROTOCOL}://${COMP_HOST}/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: true

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - prometheus-vol:/prometheus
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    environment:
      PROM_SCRAPE_TIME: ${PROM_SCRAPE_TIME}
    #
    command: ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--storage.tsdb.retention.time=1y", "--storage.tsdb.retention.size=5GB", "--storage.tsdb.wal-compression", "--web.external-url=/prometheus/"]


  node_exporter:
    image: prom/node-exporter:latest
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      #- /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  
  postgresql_exporter:
    image: bitnami/postgres-exporter:latest
    restart: always
    environment:
      - DATA_SOURCE_NAME=postgres://root:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable
  
  postgresql:
    image: postgis/postgis 
    #use tobi312/rpi-postgresql-postgis:16-3.4-alpine-arm on raspberry
    restart: always

    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db-vol:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "root"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  insigno:
    image: mindshubalessio/insigno
    restart: always
    volumes:
      - type: bind
        source: ./Insigno.toml
        target: /app/Insigno.toml
        # uncomment if you want to provide your template for the mail
      #- type: bind
      #  source: ./templates
      #  target: /templates
      - media-vol:/app/media
    depends_on:
      postgresql:
        condition: service_healthy
  caddy:
    image: caddy:latest
    restart: always
    ports:
    - "80:80"
    - "443:443"
    volumes:
      - caddy-data:/data
      - ./Caddyfile:/etc/caddy/Caddyfile
    environment:
      COMP_HOST: ${COMP_HOST}
      COMP_PROTOCOL: ${COMP_PROTOCOL}
    

volumes:
  db-vol:
  media-vol:
  prometheus-vol:
  grafana-vol:
  caddy-data: